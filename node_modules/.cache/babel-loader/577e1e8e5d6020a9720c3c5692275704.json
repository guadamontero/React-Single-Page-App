{"ast":null,"code":"var _jsxFileName = \"D:\\\\Usuario\\\\guada\\\\Desktop\\\\Udemy-React\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  //--------------------- OTRA FORMA DE HACERLO CON UN SOLO USE STATE ---------------------\n  // const [userInput, setUserInput] = useState({\n  //     enteredTitle: '',\n  //     enteredAmount: '',\n  //     enteredDate: ''\n  // });\n  // const titleChangeHandler = (event) => {\n  //     Si solo quiero cambiar el titulo, tengo que agregar el amount y el date tambien\n  //     Una forma de hacerlo es poniendo \"...userInput\"\n  //     setUserInput({\n  //         ...userInput,\n  //         enteredTitle: event.target.value\n  //     });\n  // }\n  // const amountChangeHandler = (event) => {\n  //     setUserInput({\n  //         ...userInput,\n  //         enteredAmount: event.target.value\n  //     });\n  // }\n  // const dateChangeHandler = (event) => {\n  //     setUserInput({\n  //         ...userInput,\n  //         enteredDate: event.target.value\n  //     });\n  // }\n  //--------------------- SI DEPENDE DEL STATE ANTERIOR: ---------------------\n  //This is the safer way to ensure that you always operate on the lastest state snapshot.\n  // const [userInput, setUserInput] = useState({\n  //     enteredTitle: '',\n  //     enteredAmount: '',\n  //     enteredDate: ''\n  // });\n  // const titleChangeHandler = (event) => {\n  //     setUserInput((prevState) => {\n  //         return { ...prevState, enteredTitle: event.target.value }\n  //     });\n  // }\n  // const amountChangeHandler = (event) => {\n  //     setUserInput((prevState) => {\n  //         return { ...prevState, enteredAmount: event.target.value }\n  //     });\n  // }\n  // const dateChangeHandler = (event) => {\n  //     setUserInput((prevState) => {\n  //         return { ...prevState, enteredDate: event.target.value }\n  //     });\n  // }\n  //--------------------- STATES SEPARADOS: ---------------------\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  };\n\n  const submitHandler = event => {\n    //Para sacar el reload que hace por defecto una vez que el formulario es enviado.\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n  }; //ADDING TWO-WAT BINDING (PARA QUE CUANDO ENVIES EL FORMULARIO SE BORREN LOS DATOS QUE MANDASTE) \n  // Hello everyone :)\n  // Currently I'm at lecture 57 and have to say the course is great and Max is doing really well explaining core React concepts :)\n  // The last lectures were about forms and controlling components so I thought that I could share with you a nice simple way of controlling multiple inputs (maybe the course covers the idea of computed properties later, but if not, here's me with quick example)\n  // When we're talking about two-way binding and controlling form inputs we can use something called computed properties, which allows us to control inputs via a single generic function. I think it can help keeping our code DRY. Here's an example:\n  // function Form() {\n  // const [userInput, setUserInput] = useState({mail: '', password: ''})\n  // const handleUserInput = (e) => {\n  //     setUserInput((prevState)=> (\n  //     {...prevState, \n  //     [e.target.name]: e.target.value}\n  //     ))\n  // }\n  // return (\n  //     <form>\n  //         <input value={userInput.mail} name='mail' onChange={handleUserInput}/>\n  //         <input value={userInput.password} name='password' onChange={handleUserInput}/>\n  //     </form>\n  // );\n  // }\n  // Here we're setting initial userInput state to the object contaning properties of mail and password (starting as empty strings).  The handler function can be generic, which means that instead having two functions, each controlling one input - one for mail and one for password, a single handler can control both (or more) inputs. That is because we're passing a name attribute to each input. Notice that the name attribute is the same as property in the state object. Because of that the handler function also has access to e.target.name. Now the square brackets mean that whatever is passed in the brackets is dynamic, which means that in that example it can be either a mail or password. Beacuse the property of state object is determined dynamically the handler function can assign value (coming from event object) to the corresponding to e.target.name property.\n  // Here's a nice article I found with broader explanation :)\n  // https://medium.com/@zacjones/handle-multiple-inputs-in-react-with-es6-computed-property-name-e3d41861ae46\n\n\n  setEnteredTitle('');\n  setEnteredAmount('');\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: enteredTitle,\n        onChange: titleChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"0.01\",\n        step: \"0.01\",\n        onChange: amountChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        min: \"2019-01-01\",\n        max: \"2022-12-31\",\n        onChange: dateChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 8\n  }, this);\n};\n\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date"],"sources":["D:/Usuario/guada/Desktop/Udemy-React/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport './ExpenseForm.css';\r\n\r\nconst ExpenseForm = () => {    \r\n    //--------------------- OTRA FORMA DE HACERLO CON UN SOLO USE STATE ---------------------\r\n    // const [userInput, setUserInput] = useState({\r\n    //     enteredTitle: '',\r\n    //     enteredAmount: '',\r\n    //     enteredDate: ''\r\n    // });\r\n    \r\n    // const titleChangeHandler = (event) => {\r\n    //     Si solo quiero cambiar el titulo, tengo que agregar el amount y el date tambien\r\n    //     Una forma de hacerlo es poniendo \"...userInput\"\r\n    //     setUserInput({\r\n    //         ...userInput,\r\n    //         enteredTitle: event.target.value\r\n    //     });\r\n    // }\r\n\r\n    // const amountChangeHandler = (event) => {\r\n    //     setUserInput({\r\n    //         ...userInput,\r\n    //         enteredAmount: event.target.value\r\n    //     });\r\n    // }\r\n\r\n    // const dateChangeHandler = (event) => {\r\n    //     setUserInput({\r\n    //         ...userInput,\r\n    //         enteredDate: event.target.value\r\n    //     });\r\n    // }\r\n\r\n    //--------------------- SI DEPENDE DEL STATE ANTERIOR: ---------------------\r\n    //This is the safer way to ensure that you always operate on the lastest state snapshot.\r\n    // const [userInput, setUserInput] = useState({\r\n    //     enteredTitle: '',\r\n    //     enteredAmount: '',\r\n    //     enteredDate: ''\r\n    // });\r\n    \r\n    // const titleChangeHandler = (event) => {\r\n    //     setUserInput((prevState) => {\r\n    //         return { ...prevState, enteredTitle: event.target.value }\r\n    //     });\r\n    // }\r\n\r\n    // const amountChangeHandler = (event) => {\r\n    //     setUserInput((prevState) => {\r\n    //         return { ...prevState, enteredAmount: event.target.value }\r\n    //     });\r\n    // }\r\n\r\n    // const dateChangeHandler = (event) => {\r\n    //     setUserInput((prevState) => {\r\n    //         return { ...prevState, enteredDate: event.target.value }\r\n    //     });\r\n    // }\r\n\r\n    //--------------------- STATES SEPARADOS: ---------------------\r\n    const [enteredTitle, setEnteredTitle] = useState('');\r\n    const [enteredAmount, setEnteredAmount] = useState('');\r\n    const [enteredDate, setEnteredDate] = useState('');\r\n\r\n    const titleChangeHandler = (event) => {\r\n        setEnteredTitle(event.target.value);\r\n    }\r\n\r\n    const amountChangeHandler = (event) => {\r\n        setEnteredAmount(event.target.value);\r\n    }\r\n\r\n    const dateChangeHandler = (event) => {\r\n        setEnteredDate(event.target.value);\r\n    }\r\n\r\n    const submitHandler = (event) => {\r\n        //Para sacar el reload que hace por defecto una vez que el formulario es enviado.\r\n        event.preventDefault(); \r\n\r\n        const expenseData = {\r\n            title: enteredTitle,\r\n            amount: enteredAmount,\r\n            date: new Date(enteredDate)\r\n        }\r\n    }\r\n\r\n\r\n    //ADDING TWO-WAT BINDING (PARA QUE CUANDO ENVIES EL FORMULARIO SE BORREN LOS DATOS QUE MANDASTE) \r\n    // Hello everyone :)\r\n\r\n    // Currently I'm at lecture 57 and have to say the course is great and Max is doing really well explaining core React concepts :)\r\n\r\n    // The last lectures were about forms and controlling components so I thought that I could share with you a nice simple way of controlling multiple inputs (maybe the course covers the idea of computed properties later, but if not, here's me with quick example)\r\n\r\n    // When we're talking about two-way binding and controlling form inputs we can use something called computed properties, which allows us to control inputs via a single generic function. I think it can help keeping our code DRY. Here's an example:\r\n\r\n    // function Form() {\r\n    // const [userInput, setUserInput] = useState({mail: '', password: ''})\r\n    // const handleUserInput = (e) => {\r\n    //     setUserInput((prevState)=> (\r\n    //     {...prevState, \r\n    //     [e.target.name]: e.target.value}\r\n    //     ))\r\n    // }\r\n    // return (\r\n    //     <form>\r\n    //         <input value={userInput.mail} name='mail' onChange={handleUserInput}/>\r\n    //         <input value={userInput.password} name='password' onChange={handleUserInput}/>\r\n    //     </form>\r\n    // );\r\n    // }\r\n\r\n    // Here we're setting initial userInput state to the object contaning properties of mail and password (starting as empty strings).  The handler function can be generic, which means that instead having two functions, each controlling one input - one for mail and one for password, a single handler can control both (or more) inputs. That is because we're passing a name attribute to each input. Notice that the name attribute is the same as property in the state object. Because of that the handler function also has access to e.target.name. Now the square brackets mean that whatever is passed in the brackets is dynamic, which means that in that example it can be either a mail or password. Beacuse the property of state object is determined dynamically the handler function can assign value (coming from event object) to the corresponding to e.target.name property.\r\n\r\n    // Here's a nice article I found with broader explanation :)\r\n\r\n    // https://medium.com/@zacjones/handle-multiple-inputs-in-react-with-es6-computed-property-name-e3d41861ae46\r\n\r\n    setEnteredTitle('');\r\n    setEnteredAmount('');\r\n\r\n    return (\r\n       <form onSubmit={submitHandler}>\r\n        <div className=\"new-expense__controls\"></div>\r\n        <div className=\"new-expense__control\">\r\n            <label>Title</label>\r\n            <input \r\n                type=\"text\" \r\n                value={enteredTitle} \r\n                onChange={titleChangeHandler} \r\n            />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n            <label>Amount</label>\r\n            <input type=\"number\" min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n            <label>Date</label>\r\n            <input type=\"date\" min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateChangeHandler}/>\r\n        </div>\r\n        <div className=\"new-expense__actions\">\r\n            <button type='submit'>Add Expense</button>\r\n        </div>\r\n       </form>\r\n    );\r\n}\r\n\r\nexport default ExpenseForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}